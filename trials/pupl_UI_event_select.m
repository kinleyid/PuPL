function selector = pupl_UI_event_select(EYE, varargin)
% Select events in a UI
%
% Inputs:
%   EYE: struct
%       eye data
%   prompt: string
%       prompt to display to user
% Output:
%   selector: struct
%       has fields "by" and "sel". "by" takes on a value of 'idx',
%       'regexp', or 'evar' depending on whether events are to be selected
%       by index, regular expression, or event variable. "sel" specifies
%       the particular indices, regular expression, or event variable
%       filter to be used. This selector is then used by pupl_event_select

args = pupl_args2struct(varargin, {
    'prompt' 'Select events'
    'from_log' false
});

table_data = [];
for dataidx = 1:numel(EYE)
    % Get data for UI table for each recording
    if args.from_log
        events = mergefields(EYE(dataidx), 'eventlog', 'event');
    else
        events = mergefields(EYE(dataidx), 'event');
    end
    [data, colnames] = pupl_event_toUITcell(events);
    colnames = ['selected' colnames];
    data = [num2cell(false(numel(events), 1)) data];
    table_data = [table_data struct(...
        'name', EYE(dataidx).name,...
        'events', events,...
        'data', {data},...
        'colnames', {colnames},...
        'selected', struct(...
            'idx', false(numel(events), 1),...
            'regexp', false(numel(events), 1),...
            'evar', false(numel(events), 1)))
    ];
end

% Main figure
f = figure(...
    'UserData', struct(...
        'table_data', table_data,...
        'dataidx', 1,...
        'selector', struct(...
            'idx', '', 'regexp', '', 'evar', '')),...
    'Name', args.prompt,...
    'NumberTitle', 'off',...
    'Menu', 'none');
% Prompt
uicontrol(f,...
    'Style', 'text',...
    'String', args.prompt,...
    'Units', 'normalized',...
    'Position', [0.01 0.91 0.48 0.08]);
uicontrol(f,...
    'Style', 'text',...
    'Tag', 'n.sel',...
    'String', sprintf('0/%d selected for %s', numel(events), EYE(1).name),...
    'Units', 'normalized',...
    'Position', [0.01 0.86 0.48 0.08]);
% Buttons to view other recordings
if numel(EYE) > 1
    uicontrol(f,...
        'Style', 'text',...
        'Tag', 'viewing',...
        'String', sprintf('Viewing %s', EYE(1).name),...
        'Units', 'normalized',...
        'Position', [0.51 0.91 0.48 0.08]);
    uicontrol(f,...
        'String', '< previous recording <',...
        'Units', 'normalized',...
        'Position', [0.51 0.9 0.23 0.05],...
        'Callback', @(h,e) update_dataidx(f, -1),...
        'KeyPressFcn', @(h,e) enterdo(e, @() update_dataidx(f, -1)));
    uicontrol(f,...
        'String', '> next recording >',...
        'Units', 'normalized',...
        'Position', [0.76 0.9 0.23 0.05],...
        'Callback', @(h,e) update_dataidx(f, 1),...
        'KeyPressFcn', @(h,e) enterdo(e, @() update_dataidx(f, 1)));
end
uicontrol(f,...
    'Style', 'text',...
    'Tag', 'n.sel',...
    'String', sprintf('0/%d selected for %s', numel(events), EYE(1).name),...
    'Units', 'normalized',...
    'Position', [0.01 0.86 0.48 0.08]);
% UI table in which events are displayed
uitable(f,...
    'Data', data,...
    'ColumnName', colnames,...
    'Tag', 'uit',...
    'ColumnEditable', false(1, numel(colnames)),...
    'Units', 'normalized',...
    'Position', [0.01 0.11 0.98 0.78]);
p1 = uipanel(f,...
    'Title', 'Select by:',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.23 0.08]);
uicontrol(p1,...
    'Style', 'popupmenu',...
    'Tag', 'selector-menu',...
    'String', {'Serial position' 'Regular expression' 'Event variable'},...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98],...
    'Callback', @(h,e) update_selector(f));
p2 = uipanel(f,...
    'Title', 'Serial positions',...
    'Tag', 'filter-panel',...
    'Units', 'normalized',...
    'Position', [0.26 0.01 0.33 0.08]);
uicontrol(p2,...
    'Style', 'edit',...
    'Tag', 'filter-box',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98],...
    'Callback', @(h,e) update_selection(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() update_selection(f)));
uicontrol(f,...
    'String', 'Done',...
    'Units', 'normalized',...
    'Position', [0.61 0.01 0.18 0.08],...
    'Callback', @(h,e) uiresume(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() uiresume(f)));
uicontrol(f,...
    'String', 'Cancel',...
    'Units', 'normalized',...
    'Position', [0.81 0.01 0.18 0.08],...
    'Callback', @(h,e) delete(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() delete(f)));

update_dataidx(f, 0);
update_selector(f);
update_selection(f);
uiwait(f);
if isgraphics(f)
    selector = get_selector(f);
    close(f);
else
    selector = [];
end

end

function selector = get_selector(f)

selmen = findobj(f, 'Tag', 'selector-menu');
str = get(selmen, 'String');
val = get(selmen, 'Value');
filt_box = findobj(f, 'Tag', 'filter-box');
selector = struct(...
    'sel', get(filt_box, 'String'));
switch str{val}
    case 'Serial position'
        selector.by = 'idx';
    case 'Regular expression'
        selector.by = 'regexp';
    case 'Event variable'
        selector.by = 'evar';
end

end

function update_selection(f)

ud = get(f, 'UserData');

selector = get_selector(f);

ud.selector.(selector.by) = selector.sel;

% Select events for each recording
for dataidx = 1:numel(ud.table_data)
    idx = pupl_event_select(ud.table_data(dataidx).events, selector);
    ud.table_data(dataidx).selected.(selector.by) = idx;
    sel_col_idx = strcmp(ud.table_data(dataidx).colnames, 'selected');
    ud.table_data(dataidx).data(:, sel_col_idx) = num2cell(idx);
end

% Update text
n_sel = findobj(f, 'Tag', 'n.sel');
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(selector.by)), numel(ud.table_data(ud.dataidx).events), ud.table_data(ud.dataidx).name));
% Update table
uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);
set(f, 'UserData', ud);

end

function update_selector(f)

ud = get(f, 'UserData');
selmen = findobj(f, 'Tag', 'selector-menu');
str = get(selmen, 'String');
val = get(selmen, 'Value');
filt_panel = findobj(f, 'Tag', 'filter-panel');
filt_box = findobj(f, 'Tag', 'filter-box');
switch str{val}
    case 'Serial position'
        set(filt_panel, 'Title', 'Serial positions');
        set(filt_box, 'TooltipString', sprintf('You can enter a series of numbers here.\nE.g., "1:10" or "end-10:end"'));
        by = 'idx';
    case 'Regular expression'
        set(filt_panel, 'Title', 'Regular expression');
        set(filt_box, 'TooltipString', pupl_gettooltip('regexp:edit'));
        by = 'regexp';
    case 'Event variable'
        set(filt_panel, 'Title', 'Event variable filter');
        set(filt_box, 'TooltipString', pupl_gettooltip('eventvar:edit'));
        by = 'evar';
end

set(filt_box, 'String', ud.selector.(by));
sel_col_idx = strcmp(ud.table_data(ud.dataidx).colnames, 'selected');
ud.table_data(ud.dataidx).data(:, sel_col_idx) = num2cell(ud.table_data(ud.dataidx).selected.(by));

% Update text
n_sel = findobj(f, 'Tag', 'n.sel');
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(by)), numel(ud.table_data(ud.dataidx).events), ud.table_data(ud.dataidx).name));
% Update table
uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);
set(f, 'UserData', ud);

end

function update_dataidx(f, d)

ud = get(f, 'UserData');
ud.dataidx = ud.dataidx + d;
if ud.dataidx <= 0
    ud.dataidx = numel(ud.table_data);
elseif ud.dataidx > numel(ud.table_data)
    ud.dataidx = 1;
end

v = findobj(f, 'Tag', 'viewing');
set(v, 'String', sprintf('Viewing %s', ud.table_data(ud.dataidx).name))

n_sel = findobj(f, 'Tag', 'n.sel');
selector = get_selector(f);
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(selector.by)), numel(ud.table_data(ud.dataidx).events), ud.table_data(ud.dataidx).name));

sel_col_idx = strcmp(ud.table_data(ud.dataidx).colnames, 'selected');
ud.table_data(ud.dataidx).data(:, sel_col_idx) = num2cell(ud.table_data(ud.dataidx).selected.(selector.by));

uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);

set(f, 'UserData', ud);

end
