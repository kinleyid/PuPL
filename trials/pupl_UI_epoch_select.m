function selector = pupl_UI_epoch_select(EYE, varargin)
% Select epochs in a UI
%
% Inputs:
%   EYE: struct
%       eye data
%   prompt: string
%       prompt to display to user
% Output:
%   selector: struct
%       an epoch selector with one attribute called "idx", "type", or
%       "filt" depending on whether epochs are to be selected by index,
%       epoch name, or something to do with timelocking events. If the
%       latter, "filt" is an event selector to be used as input by
%       pupl_event_select

args = pupl_args2struct(varargin, {
    'prompt' 'Select epochs'
});

table_data = [];
for dataidx = 1:numel(EYE)
    % Get data for UI table for each recording
    events = pupl_epoch_get(EYE(dataidx), [], '_tl');
    [data, colnames] = pupl_event_toUITcell(events);
    colnames = strcat({' '}, colnames, {' '}, '(of timelocking event)', {' '});
    colnames = ['epoch name' colnames];
    epoch_names = {EYE(dataidx).epoch.name};
    data = [epoch_names(:) data];
    colnames = ['selected' colnames];
    data = [num2cell(false(numel(events), 1)) data];
    table_data = [table_data struct(...
        'name', EYE(dataidx).name,...
        'EYE', EYE(dataidx),...
        'data', {data},...
        'colnames', {colnames},...
        'selected', struct(...
            'idx', false(numel(events), 1),...
            'type', false(numel(events), 1),...
            'regexp', false(numel(events), 1),...
            'evar', false(numel(events), 1)))
    ];
end

% Main figure
f = figure(...
    'UserData', struct(...
        'table_data', table_data,...
        'dataidx', 1,...
        'selector', struct(...
            'idx', '', 'type', '', 'regexp', '', 'evar', '')),...
    'Name', args.prompt,...
    'NumberTitle', 'off',...
    'Menu', 'none');
% Prompt
uicontrol(f,...
    'Style', 'text',...
    'String', args.prompt,...
    'Units', 'normalized',...
    'Position', [0.01 0.91 0.48 0.08]);
uicontrol(f,...
    'Style', 'text',...
    'Tag', 'n.sel',...
    'String', sprintf('0/%d selected for %s', numel(events), EYE(1).name),...
    'Units', 'normalized',...
    'Position', [0.01 0.86 0.48 0.08]);
% Buttons to view other recordings
if numel(EYE) > 1
    uicontrol(f,...
        'Style', 'text',...
        'Tag', 'viewing',...
        'String', sprintf('Viewing %s', EYE(1).name),...
        'Units', 'normalized',...
        'Position', [0.51 0.91 0.48 0.08]);
    uicontrol(f,...
        'String', '< previous recording <',...
        'Units', 'normalized',...
        'Position', [0.51 0.9 0.23 0.05],...
        'Callback', @(h,e) update_dataidx(f, -1),...
        'KeyPressFcn', @(h,e) enterdo(e, @() update_dataidx(f, -1)));
    uicontrol(f,...
        'String', '> next recording >',...
        'Units', 'normalized',...
        'Position', [0.76 0.9 0.23 0.05],...
        'Callback', @(h,e) update_dataidx(f, 1),...
        'KeyPressFcn', @(h,e) enterdo(e, @() update_dataidx(f, 1)));
end
uicontrol(f,...
    'Style', 'text',...
    'Tag', 'n.sel',...
    'String', sprintf('0/%d selected for %s', numel(events), EYE(1).name),...
    'Units', 'normalized',...
    'Position', [0.01 0.86 0.48 0.08]);
% UI table in which events are displayed
uitable(f,...
    'Data', data,...
    'ColumnName', colnames,...
    'Tag', 'uit',...
    'ColumnEditable', false(1, numel(colnames)),...
    'Units', 'normalized',...
    'Position', [0.01 0.11 0.98 0.78]);
p1 = uipanel(f,...
    'Title', 'Select by:',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.23 0.08]);
uicontrol(p1,...
    'Style', 'popupmenu',...
    'Tag', 'selector-menu',...
    'String', {'Serial position' 'Epoch name' 'Regular expression (timelocking event)' 'Event variable (timelocking event)'},...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98],...
    'Callback', @(h,e) update_selector(f));
p2 = uipanel(f,...
    'Title', 'Serial positions',...
    'Tag', 'filter-panel',...
    'Units', 'normalized',...
    'Position', [0.26 0.01 0.33 0.08]);
uicontrol(p2,...
    'Style', 'edit',...
    'Tag', 'filter-box',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98],...
    'Callback', @(h,e) update_selection(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() update_selection(f)));
uicontrol(p2,...
    'Style', 'popupmenu',...
    'Tag', 'filter-menu',...
    'Visible', 'off',...
    'String', [{''} unique(mergefields(EYE, 'epoch', 'name'))],...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98],...
    'Callback', @(h,e) update_selection(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() update_selection(f)));
uicontrol(f,...
    'String', 'Done',...
    'Units', 'normalized',...
    'Position', [0.61 0.01 0.18 0.08],...
    'Callback', @(h,e) uiresume(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() uiresume(f)));
uicontrol(f,...
    'String', 'Cancel',...
    'Units', 'normalized',...
    'Position', [0.81 0.01 0.18 0.08],...
    'Callback', @(h,e) delete(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() delete(f)));

uiwait(f);
if isgraphics(f)
    selector = get_selector(f);
    close(f);
else
    selector = [];
end

end

function selector = get_selector(f)

selmen = findobj(f, 'Tag', 'selector-menu');
str = get(selmen, 'String');
val = get(selmen, 'Value');
filt_box = findobj(f, 'Tag', 'filter-box');

selector = [];
switch val
    case 1 % serial position
        selector.idx = get(filt_box, 'String');
    case 2 % epoch name
        filt_menu = findobj(f, 'Tag', 'filter-menu');
        fstr = get(filt_menu, 'String');
        fval = get(filt_menu, 'Value');
        selector.type = fstr{fval};
    case 3 % regular expression
        selector.filt = struct(...
            'by', 'regexp',...
            'sel', get(filt_box, 'String'));
    case 4 % event variable
        selector.filt = struct(...
            'by', 'evar',...
            'sel', get(filt_box, 'String'));
end

end

function update_selection(f)

ud = get(f, 'UserData');

selector = get_selector(f);

fn = fieldnames(selector);
if strcmp(fn{1}, 'filt')
    by = selector.filt.by;
    ud.selector.(by) = selector.filt.sel;
else
    by = fn{1};
    ud.selector.(by) = selector.(by);
end

% Select events for each recording
for dataidx = 1:numel(ud.table_data)
    idx = pupl_epoch_sel(ud.table_data(dataidx).EYE, selector);
    ud.table_data(dataidx).selected.(by) = idx;
    sel_col_idx = strcmp(ud.table_data(dataidx).colnames, 'selected');
    ud.table_data(dataidx).data(:, sel_col_idx) = num2cell(idx);
end

% Update text
n_sel = findobj(f, 'Tag', 'n.sel');
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(by)), numel(ud.table_data(ud.dataidx).EYE.epoch), ud.table_data(ud.dataidx).name));
% Update table
uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);
set(f, 'UserData', ud);

end

function update_selector(f)

ud = get(f, 'UserData');
selmen = findobj(f, 'Tag', 'selector-menu');
str = get(selmen, 'String');
val = get(selmen, 'Value');
filt_panel = findobj(f, 'Tag', 'filter-panel');
filt_box = findobj(filt_panel, 'Tag', 'filter-box');
filt_menu = findobj(filt_panel, 'Tag', 'filter-menu');
switch val
    case 1 % serial position
        set(filt_panel, 'Title', 'Serial positions');
        set(filt_box, 'Visible', 'on');
        set(filt_menu, 'Visible', 'off');
        set(filt_box, 'TooltipString', 'You can enter a series of numbers here. E.g., 1:10');
        by = 'idx';
        set(filt_box, 'String', ud.selector.(by));
    case 2 % epoch name
        set(filt_panel, 'Title', 'Epoch name');
        set(filt_box, 'Visible', 'off');
        set(filt_menu, 'Visible', 'on');
        by = 'type';
    case 3 % regular expression
        set(filt_panel, 'Title', 'Regular expression');
        set(filt_box, 'Visible', 'on');
        set(filt_menu, 'Visible', 'off');
        set(filt_box, 'TooltipString', pupl_gettooltip('regexp:edit'));
        by = 'regexp';
        set(filt_box, 'String', ud.selector.(by));
    case 4 % event variable
        set(filt_panel, 'Title', 'Event variable filter');
        set(filt_box, 'Visible', 'on');
        set(filt_menu, 'Visible', 'off');
        set(filt_box, 'TooltipString', pupl_gettooltip('eventvar:edit'));
        by = 'evar';
        set(filt_box, 'String', ud.selector.(by));
end

sel_col_idx = strcmp(ud.table_data(ud.dataidx).colnames, 'selected');
ud.table_data(ud.dataidx).data(:, sel_col_idx) = num2cell(ud.table_data(ud.dataidx).selected.(by));

% Update text
selector = get_selector(f);
fn = fieldnames(selector);
if strcmp(fn{1}, 'filt')
    by = selector.filt.by;
else
    by = fn{1};
end
n_sel = findobj(f, 'Tag', 'n.sel');
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(by)), numel(ud.table_data(ud.dataidx).EYE.event), ud.table_data(ud.dataidx).name));
% Update table
uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);
set(f, 'UserData', ud);

end

function update_dataidx(f, d)

ud = get(f, 'UserData');
ud.dataidx = ud.dataidx + d;
if ud.dataidx <= 0
    ud.dataidx = numel(ud.table_data);
elseif ud.dataidx > numel(ud.table_data)
    ud.dataidx = 1;
end

v = findobj(f, 'Tag', 'viewing');
set(v, 'String', sprintf('Viewing %s', ud.table_data(ud.dataidx).name))

n_sel = findobj(f, 'Tag', 'n.sel');
selector = get_selector(f);
fn = fieldnames(selector);
if strcmp(fn{1}, 'filt')
    by = selector.filt.by;
else
    by = fn{1};
end
set(n_sel, 'String', sprintf('%d/%d selected for %s', nnz(ud.table_data(ud.dataidx).selected.(by)), numel(ud.table_data(ud.dataidx).EYE.event), ud.table_data(ud.dataidx).name));

uit = findobj(f, 'Tag', 'uit');
set(uit, 'Data', ud.table_data(ud.dataidx).data);

set(f, 'UserData', ud);

end